"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[412],{4784:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var i=t(7624),s=t(2172);const a={id:"currency",title:"Setting up Currencies",sidebar_label:"Currencies"},c=void 0,r={id:"tutorials/coinGame/currency",title:"Setting up Currencies",description:"---",source:"@site/docs/tutorials/coinGame/currency.md",sourceDirName:"tutorials/coinGame",slug:"/tutorials/coinGame/currency",permalink:"/emath.js/docs/tutorials/coinGame/currency",draft:!1,unlisted:!1,editUrl:"https://github.com/xShadowBlade/emath.js/tree/main/website/docs/tutorials/coinGame/currency.md",tags:[],version:"current",frontMatter:{id:"currency",title:"Setting up Currencies",sidebar_label:"Currencies"},sidebar:"tutorialSidebar",previous:{title:"Setup",permalink:"/emath.js/docs/tutorials/coinGame/setup"},next:{title:"Upgrades",permalink:"/emath.js/docs/tutorials/coinGame/upgrades"}},o={},d=[];function l(n){const e={a:"a",code:"code",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.M)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.p,{children:"After you have set up the basics, now it's time to configure the currencies!"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:'window.addEventListener("load", () => {\n\t// ... (setup)\n\n\t// Initialize currency and static currency\n    const currency = new eMath.classes.currency();\n    const staticC = new eMath.classes.currencyStatic(() => currency);\n});\n'})}),"\n",(0,i.jsx)(e.p,{children:"Explanation:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Creates instances of the ",(0,i.jsx)(e.code,{children:"currency"})," and ",(0,i.jsx)(e.code,{children:"currencyStatic"})," classes from the ",(0,i.jsx)(e.code,{children:"eMath"})," library, setting up the fundamental components for managing in-game currency."]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:'window.addEventListener("load", () => {\n\t// ... (setup)\n\t// ... (currencies init)\n\t// Create Coins Display\n\tconst coinsDisplay = document.createElement("p");\n\tdocument.body.appendChild(coinsDisplay);\n\tcoinsDisplay.id = "coinsDisplay";\n});\n'})}),"\n",(0,i.jsx)(e.p,{children:"Explanation:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Dynamically creates a paragraph element (",(0,i.jsx)(e.code,{children:"<p>"}),") to display the player's coin count."]}),"\n",(0,i.jsx)(e.li,{children:"Appends the created element to the HTML body."}),"\n",(0,i.jsx)(e.li,{children:'Sets the ID of the created element to "coinsDisplay" for easy reference.'}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:'window.addEventListener("load", () => {\n\t// ... (setup)\n\t// ... (currencies init)\n\t// ... (create coins display)\n\n\t// Function to update the coins display\n    function updateDisplay () {\n        document.getElementById("coinsDisplay").innerHTML = `Coins: ${currency.value.format()} (x${staticC.boost.calculate().format()})`; // Updates the display and shows the multiplier. Ex. "Coins: 2.00 (x1.0)"\n    }\n\tupdateDisplay();\n});\n    \n'})}),"\n",(0,i.jsx)(e.p,{children:"Explanation:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Defines a function named ",(0,i.jsx)(e.code,{children:"updateDisplay"})," responsible for updating the displayed coin count."]}),"\n",(0,i.jsxs)(e.li,{children:["Uses the ",(0,i.jsx)(e.code,{children:"innerHTML"}),' property to set the content of the "coinsDisplay" element with the formatted coin value and boost multiplier.']}),"\n",(0,i.jsxs)(e.li,{children:["Invokes the ",(0,i.jsx)(e.code,{children:"updateDisplay"})," function to set the initial display when the page loads."]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:'window.addEventListener("load", () => {\n\t// ... (setup)\n\t// ... (currencies init)\n\t// ... (create coins display)\n\t// ... (Function to update the coins display)\n\n    // Create gain button\n\n    const gainButton = document.createElement("button");\n    gainButton.innerHTML = "Gain Coins";\n    document.body.appendChild(gainButton);\n    gainButton.addEventListener("click", () => {\n\t\t// Triggers when button is pressed\n        staticC.gain(); // Gain\n        updateDisplay(); // Updates the display for the amount of coins\n        updateDisplayUpgrade(); // Next tutorial\n    });\n});\n'})}),"\n",(0,i.jsx)(e.p,{children:"Explanation:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:'It creates a button labeled "Gain Coins" and appends it to the HTML body.'}),"\n",(0,i.jsx)(e.li,{children:"An event listener is attached to the button, triggering actions related to gaining coins and updating the display when the button is clicked."}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"Final code:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:'window.addEventListener("load", () => {\n    const { E } = eMath;\n\n\t// Initialize currency and static currency\n\n    const currency = new eMath.classes.currency();\n    const staticC = new eMath.classes.currencyStatic(() => currency);\n\n    // Create Coins Display\n\n    const coinsDisplay = document.createElement("p");\n    document.body.appendChild(coinsDisplay);\n    coinsDisplay.id = "coinsDisplay";\n\n\t// Function to update the coins display\n\n    function updateDisplay () {\n        document.getElementById("coinsDisplay").innerHTML = `Coins: ${currency.value.format()} (x${staticC.boost.calculate().format()})`; // Updates the display and shows the multiplier. Ex. "Coins: 2.00 (x1.0)"\n    }\n    updateDisplay();\n\n\t// Create gain button\n\n    const gainButton = document.createElement("button");\n    gainButton.innerHTML = "Gain Coins";\n    document.body.appendChild(gainButton);\n    gainButton.addEventListener("click", () => {\n        // Triggers when button is pressed\n        staticC.gain(); // Gain\n        updateDisplay(); // Updates the display for the amount of coins\n        updateDisplayUpgrade(); // Next tutorial\n    });\n});\n'})}),"\n",(0,i.jsxs)(e.p,{children:["In this section, we've set up the foundational elements for managing in-game currency, created a display for the player's coins, and initiated an update function to reflect changes in the displayed information. After you have setup the currencies, continue to the ",(0,i.jsx)(e.a,{href:"./upgrades",children:"upgrades tutorial"}),"."]})]})}function u(n={}){const{wrapper:e}={...(0,s.M)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}},2172:(n,e,t)=>{t.d(e,{I:()=>r,M:()=>c});var i=t(1504);const s={},a=i.createContext(s);function c(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:c(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);