"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[325],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>y});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),l=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(t),m=r,y=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return t?a.createElement(y,o(o({ref:n},u),{},{components:t})):a.createElement(y,o({ref:n},u))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[p]="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4869:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var a=t(7462),r=(t(7294),t(3905));const i={id:"currency",title:"Setting up Currencies",sidebar_label:"Currencies"},o=void 0,c={unversionedId:"tutorials/coinGame/currency",id:"tutorials/coinGame/currency",title:"Setting up Currencies",description:"---",source:"@site/docs/tutorials/coinGame/currency.md",sourceDirName:"tutorials/coinGame",slug:"/tutorials/coinGame/currency",permalink:"/emath.js/docs/tutorials/coinGame/currency",draft:!1,editUrl:"https://github.com/xShadowBlade/emath.js/tree/main/website/docs/tutorials/coinGame/currency.md",tags:[],version:"current",frontMatter:{id:"currency",title:"Setting up Currencies",sidebar_label:"Currencies"},sidebar:"tutorialSidebar",previous:{title:"Setup",permalink:"/emath.js/docs/tutorials/coinGame/setup"},next:{title:"Upgrades",permalink:"/emath.js/docs/tutorials/coinGame/upgrades"}},s={},l=[],u={toc:l},p="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("hr",null),(0,r.kt)("p",null,"After you have set up the basics, now it's time to configure the currencies!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'window.addEventListener("load", () => {\n    // ... (setup)\n\n    // Initialize currency and static currency\n    const currency = new eMath.classes.currency();\n    const staticC = new eMath.classes.currencyStatic(() => currency);\n});\n')),(0,r.kt)("p",null,"Explanation:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Creates instances of the ",(0,r.kt)("inlineCode",{parentName:"li"},"currency")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"currencyStatic")," classes from the ",(0,r.kt)("inlineCode",{parentName:"li"},"eMath")," library, setting up the fundamental components for managing in-game currency.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'window.addEventListener("load", () => {\n    // ... (setup)\n    // ... (currencies init)\n    // Create Coins Display\n    const coinsDisplay = document.createElement("p");\n    document.body.appendChild(coinsDisplay);\n    coinsDisplay.id = "coinsDisplay";\n});\n')),(0,r.kt)("p",null,"Explanation:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Dynamically creates a paragraph element (",(0,r.kt)("inlineCode",{parentName:"li"},"<p>"),") to display the player's coin count."),(0,r.kt)("li",{parentName:"ul"},"Appends the created element to the HTML body."),(0,r.kt)("li",{parentName:"ul"},'Sets the ID of the created element to "coinsDisplay" for easy reference.')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'window.addEventListener("load", () => {\n    // ... (setup)\n    // ... (currencies init)\n    // ... (create coins display)\n\n    // Function to update the coins display\n    function updateDisplay () {\n        document.getElementById("coinsDisplay").innerHTML = `Coins: ${currency.value.format()} (x${staticC.boost.calculate().format()})`; // Updates the display and shows the multiplier. Ex. "Coins: 2.00 (x1.0)"\n    }\n    updateDisplay();\n});\n    \n')),(0,r.kt)("p",null,"Explanation:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Defines a function named ",(0,r.kt)("inlineCode",{parentName:"li"},"updateDisplay")," responsible for updating the displayed coin count."),(0,r.kt)("li",{parentName:"ul"},"Uses the ",(0,r.kt)("inlineCode",{parentName:"li"},"innerHTML"),' property to set the content of the "coinsDisplay" element with the formatted coin value and boost multiplier.'),(0,r.kt)("li",{parentName:"ul"},"Invokes the ",(0,r.kt)("inlineCode",{parentName:"li"},"updateDisplay")," function to set the initial display when the page loads.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'window.addEventListener("load", () => {\n    // ... (setup)\n    // ... (currencies init)\n    // ... (create coins display)\n    // ... (Function to update the coins display)\n\n    // Create gain button\n\n    const gainButton = document.createElement("button");\n    gainButton.innerHTML = "Gain Coins";\n    document.body.appendChild(gainButton);\n    gainButton.addEventListener("click", () => {\n        // Triggers when button is pressed\n        staticC.gain(); // Gain\n        updateDisplay(); // Updates the display for the amount of coins\n        updateDisplayUpgrade(); // Next tutorial\n    });\n});\n')),(0,r.kt)("p",null,"Explanation:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'It creates a button labeled "Gain Coins" and appends it to the HTML body.'),(0,r.kt)("li",{parentName:"ul"},"An event listener is attached to the button, triggering actions related to gaining coins and updating the display when the button is clicked.")),(0,r.kt)("p",null,"Final code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'window.addEventListener("load", () => {\n    const { E } = eMath;\n\n    // Initialize currency and static currency\n\n    const currency = new eMath.classes.currency();\n    const staticC = new eMath.classes.currencyStatic(() => currency);\n\n    // Create Coins Display\n\n    const coinsDisplay = document.createElement("p");\n    document.body.appendChild(coinsDisplay);\n    coinsDisplay.id = "coinsDisplay";\n\n    // Function to update the coins display\n\n    function updateDisplay () {\n        document.getElementById("coinsDisplay").innerHTML = `Coins: ${currency.value.format()} (x${staticC.boost.calculate().format()})`; // Updates the display and shows the multiplier. Ex. "Coins: 2.00 (x1.0)"\n    }\n    updateDisplay();\n\n    // Create gain button\n\n    const gainButton = document.createElement("button");\n    gainButton.innerHTML = "Gain Coins";\n    document.body.appendChild(gainButton);\n    gainButton.addEventListener("click", () => {\n        // Triggers when button is pressed\n        staticC.gain(); // Gain\n        updateDisplay(); // Updates the display for the amount of coins\n        updateDisplayUpgrade(); // Next tutorial\n    });\n});\n')),(0,r.kt)("p",null,"In this section, we've set up the foundational elements for managing in-game currency, created a display for the player's coins, and initiated an update function to reflect changes in the displayed information. After you have setup the currencies, continue to the ",(0,r.kt)("a",{parentName:"p",href:"./upgrades"},"upgrades tutorial"),"."))}d.isMDXComponent=!0}}]);